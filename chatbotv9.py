# -*- coding: utf-8 -*-
"""Chatbotv12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RcZ9vk-JwHIRozGGcrBI39a4GyPmQ8Om
"""

import io
import random
import string # to process standard python strings
import warnings
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import warnings
warnings.filterwarnings('ignore')
import requests
from bs4 import BeautifulSoup
import re

import nltk
from nltk.stem import WordNetLemmatizer
nltk.download('popular', quiet=True) # for downloading packages

lemmer = nltk.stem.WordNetLemmatizer()

def LemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]

dict_remove_punct = dict((ord(punct), None) for punct in string.punctuation)

def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(dict_remove_punct)))

def thanking(user_response):
    thanking_input = [r'(^th*anks*$)',r'(^th*ank*you*$)']
    thanking_response = ["You are welcome.." , "It's my pleasure to help you!" , "It was great talking to you..."]

    for thank in thanking_input:
        if re.match(thank , user_response) is not None:
            return random.choice(thanking_response) + "Take care!"
def greeting_bye(user_response):
    bye_inputs = [r'(^b*y*e*$)' , r'(^b*u*y*e*$)'] 
    bye_response = ["Bye, " , "It was great talking to you..." , "Bye bye, "]
    
    for greet in bye_inputs:
        if re.match(greet , user_response) is not None:
            return random.choice(bye_response) + "Take care!"
def initiate_chat():
    greet = ["Hello, " , "Hi, " , "Hey, "]
    intro = ["here to assist you with anything related to the Department. " , "ask me anything you want to know about the Department. " , "here to answer your queries about the Department. "]
    ending = ["Let me know how I can help you!" , "Tell me what I can let you know!" , "Let me know what you are interested in!"]
    return random.choice(greet) + "welcome to ISE Department of DSCE. I'm ISEBOT, " + random.choice(intro) + random.choice(ending)

def greeting(user_response):
    greeting_inputs = [r'(^h*i*$)' , r'(^h*el*o*$)' , r'(^h*e*y*$)']
    greeting_reply = ["Hello" , "Hi" , "Anneyeonghaseyo", "Heyy"]
    
    for greet in greeting_inputs:
        if re.match(greet , user_response) is not None:
            return random.choice(greeting_reply) + ", how may I help you?"

def dataCollection():
    r = requests.get("https://www.dsce.edu.in/academics/ug/ise")
    soup = BeautifulSoup(r.content, 'html5lib')
    table = soup.find('div', attrs = {'id':'content_main'})

    headings3 = []
    responses = []

    for row in table.findAll('div'): 
        try:
            if row.h3 is not None and row.h3.text.lower() not in headings3:
                data = row.get_text().replace("View More" , "")
                responses.append(data)
                headings3.append(row.h3.text.lower())
        except:
            continue  
    return headings3 , responses

def response(user_response):
    bot_response=''
    headings3 , responses = dataCollection()
    headings3.append(user_response)
    TfidfVec = TfidfVectorizer(tokenizer = LemNormalize, stop_words='english')
    tfidf = TfidfVec.fit_transform(headings3)
    vals = cosine_similarity(tfidf[-1], tfidf)
    idx = vals.argsort()[0][-2]
    flat = vals.flatten()
    flat.sort()
    req_tfidf = flat[-2]
    if(req_tfidf == 0):
        bot_response=bot_response+"I am sorry! I don't understand you"
        return bot_response
    else:
        bot_response =  bot_response + responses[idx]
        return  bot_response

def get_response(user_response):
    if greeting(user_response) is None and thanking(user_response) is None and greeting_bye(user_response) is None:
        return response(user_response)
    elif greeting(user_response) is not None:
        return greeting(user_response)
    elif thanking(user_response) is not None:
        return thanking(user_response)
    else:
        return greeting_bye(user_response)
